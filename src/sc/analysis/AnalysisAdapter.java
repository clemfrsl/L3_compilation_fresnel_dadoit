/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import java.util.*;
import sc.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAProgramme(AProgramme node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListedeclarationvariableLdv(AListedeclarationvariableLdv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALdv(ALdv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListedeclarationvariablebisLdvbis(AListedeclarationvariablebisLdvbis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALdvbis(ALdvbis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationvariableidDv(ADeclarationvariableidDv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADeclarationvariableidtableauDv(ADeclarationvariableidtableauDv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListedeclarationfonctionLdf(AListedeclarationfonctionLdf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALdf(ALdf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeboolTv(ATypeboolTv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeentierTv(ATypeentierTv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADf(ADf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATypeoptionelTo(ATypeoptionelTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseATo(ATo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABi(ABi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListeinstructionLi(AListeinstructionLi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALi(ALi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAssignationInst(AAssignationInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseABoucletantqueInst(ABoucletantqueInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASialorsInst(ASialorsInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseASialorssinonInst(ASialorssinonInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseARetourInst(ARetourInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAFonctionecrireInst(AFonctionecrireInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAppelfonctionInst(AAppelfonctionInst node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListeexprLexp(AListeexprLexp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALexp(ALexp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAListeexprbisLexpbis(AListeexprbisLexpbis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseALexpbis(ALexpbis node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAOuExp(AOuExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPasouExp(APasouExp node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEtE1(AEtE1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPasetE1(APasetE1 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEgalE2(AEgalE2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAInfE2(AInfE2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPasegalinfE2(APasegalinfE2 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPlusE3(APlusE3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMoinsE3(AMoinsE3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPasplusmoinsE3(APasplusmoinsE3 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAMulE4(AMulE4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseADivE4(ADivE4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPasmuldivE4(APasmuldivE4 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseANegationE5(ANegationE5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAPasnegationE5(APasnegationE5 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEboucleexprE6(AEboucleexprE6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEvarE6(AEvarE6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEnombreE6(AEnombreE6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEfonctionE6(AEfonctionE6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAElireE6(AElireE6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEvraiE6(AEvraiE6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAEfauxE6(AEfauxE6 node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVaridentifVar(AVaridentifVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAVarfonctionVar(AVarfonctionVar node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEspaces(TEspaces node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentaire(TCommentaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgule(TVirgule node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPointvirgule(TPointvirgule node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBoolean(TBoolean node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEntier(TEntier node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNombre(TNombre node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParenthesegauche(TParenthesegauche node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParenthesedroite(TParenthesedroite node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCrochetgauche(TCrochetgauche node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCrochetdroit(TCrochetdroit node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAccoladegauche(TAccoladegauche node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAccoladedroite(TAccoladedroite node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEgal(TEgal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPlus(TPlus node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMoins(TMoins node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMul(TMul node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInf(TInf node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOu(TOu node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEt(TEt node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNon(TNon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLire(TLire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEcrire(TEcrire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRetour(TRetour node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVrai(TVrai node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFaux(TFaux node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTantque(TTantque node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFaire(TFaire node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSi(TSi node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAlors(TAlors node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSinon(TSinon node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentif(TIdentif node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
