/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import sc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgramme(AProgramme node);
    void caseAListedeclarationvariableLdv(AListedeclarationvariableLdv node);
    void caseALdv(ALdv node);
    void caseAListedeclarationvariablebisLdvbis(AListedeclarationvariablebisLdvbis node);
    void caseALdvbis(ALdvbis node);
    void caseADeclarationvariableidDv(ADeclarationvariableidDv node);
    void caseADeclarationvariableidtableauDv(ADeclarationvariableidtableauDv node);
    void caseAListedeclarationfonctionLdf(AListedeclarationfonctionLdf node);
    void caseALdf(ALdf node);
    void caseATypeboolTv(ATypeboolTv node);
    void caseATypeentierTv(ATypeentierTv node);
    void caseADf(ADf node);
    void caseATypeoptionelTo(ATypeoptionelTo node);
    void caseATo(ATo node);
    void caseABi(ABi node);
    void caseAListeinstructionLi(AListeinstructionLi node);
    void caseALi(ALi node);
    void caseAAssignationInst(AAssignationInst node);
    void caseABoucletantqueInst(ABoucletantqueInst node);
    void caseASialorsInst(ASialorsInst node);
    void caseASialorssinonInst(ASialorssinonInst node);
    void caseARetourInst(ARetourInst node);
    void caseAFonctionecrireInst(AFonctionecrireInst node);
    void caseAAppelfonctionInst(AAppelfonctionInst node);
    void caseAListeexprLexp(AListeexprLexp node);
    void caseALexp(ALexp node);
    void caseAListeexprbisLexpbis(AListeexprbisLexpbis node);
    void caseALexpbis(ALexpbis node);
    void caseAOuExp(AOuExp node);
    void caseAPasouExp(APasouExp node);
    void caseAEtE1(AEtE1 node);
    void caseAPasetE1(APasetE1 node);
    void caseAEgalE2(AEgalE2 node);
    void caseAInfE2(AInfE2 node);
    void caseAPasegalinfE2(APasegalinfE2 node);
    void caseAPlusE3(APlusE3 node);
    void caseAMoinsE3(AMoinsE3 node);
    void caseAPasplusmoinsE3(APasplusmoinsE3 node);
    void caseAMulE4(AMulE4 node);
    void caseADivE4(ADivE4 node);
    void caseAPasmuldivE4(APasmuldivE4 node);
    void caseANegationE5(ANegationE5 node);
    void caseAPasnegationE5(APasnegationE5 node);
    void caseAEboucleexprE6(AEboucleexprE6 node);
    void caseAEvarE6(AEvarE6 node);
    void caseAEnombreE6(AEnombreE6 node);
    void caseAEfonctionE6(AEfonctionE6 node);
    void caseAElireE6(AElireE6 node);
    void caseAEvraiE6(AEvraiE6 node);
    void caseAEfauxE6(AEfauxE6 node);
    void caseAVaridentifVar(AVaridentifVar node);
    void caseAVarfonctionVar(AVarfonctionVar node);

    void caseTEspaces(TEspaces node);
    void caseTCommentaire(TCommentaire node);
    void caseTVirgule(TVirgule node);
    void caseTPointvirgule(TPointvirgule node);
    void caseTBoolean(TBoolean node);
    void caseTEntier(TEntier node);
    void caseTNombre(TNombre node);
    void caseTParenthesegauche(TParenthesegauche node);
    void caseTParenthesedroite(TParenthesedroite node);
    void caseTCrochetgauche(TCrochetgauche node);
    void caseTCrochetdroit(TCrochetdroit node);
    void caseTAccoladegauche(TAccoladegauche node);
    void caseTAccoladedroite(TAccoladedroite node);
    void caseTEgal(TEgal node);
    void caseTPlus(TPlus node);
    void caseTMoins(TMoins node);
    void caseTMul(TMul node);
    void caseTDiv(TDiv node);
    void caseTInf(TInf node);
    void caseTOu(TOu node);
    void caseTEt(TEt node);
    void caseTNon(TNon node);
    void caseTLire(TLire node);
    void caseTEcrire(TEcrire node);
    void caseTRetour(TRetour node);
    void caseTVrai(TVrai node);
    void caseTFaux(TFaux node);
    void caseTTantque(TTantque node);
    void caseTFaire(TFaire node);
    void caseTSi(TSi node);
    void caseTAlors(TAlors node);
    void caseTSinon(TSinon node);
    void caseTIdentif(TIdentif node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
