/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AListeinstructionLi extends PLi
{
    private PInst _inst_;
    private PLi _li_;

    public AListeinstructionLi()
    {
        // Constructor
    }

    public AListeinstructionLi(
        @SuppressWarnings("hiding") PInst _inst_,
        @SuppressWarnings("hiding") PLi _li_)
    {
        // Constructor
        setInst(_inst_);

        setLi(_li_);

    }

    @Override
    public Object clone()
    {
        return new AListeinstructionLi(
            cloneNode(this._inst_),
            cloneNode(this._li_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListeinstructionLi(this);
    }

    public PInst getInst()
    {
        return this._inst_;
    }

    public void setInst(PInst node)
    {
        if(this._inst_ != null)
        {
            this._inst_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inst_ = node;
    }

    public PLi getLi()
    {
        return this._li_;
    }

    public void setLi(PLi node)
    {
        if(this._li_ != null)
        {
            this._li_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._li_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._inst_)
            + toString(this._li_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._inst_ == child)
        {
            this._inst_ = null;
            return;
        }

        if(this._li_ == child)
        {
            this._li_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._inst_ == oldChild)
        {
            setInst((PInst) newChild);
            return;
        }

        if(this._li_ == oldChild)
        {
            setLi((PLi) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
