/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ANegationE5 extends PE5
{
    private TNon _non_;
    private PE5 _e5_;

    public ANegationE5()
    {
        // Constructor
    }

    public ANegationE5(
        @SuppressWarnings("hiding") TNon _non_,
        @SuppressWarnings("hiding") PE5 _e5_)
    {
        // Constructor
        setNon(_non_);

        setE5(_e5_);

    }

    @Override
    public Object clone()
    {
        return new ANegationE5(
            cloneNode(this._non_),
            cloneNode(this._e5_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANegationE5(this);
    }

    public TNon getNon()
    {
        return this._non_;
    }

    public void setNon(TNon node)
    {
        if(this._non_ != null)
        {
            this._non_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._non_ = node;
    }

    public PE5 getE5()
    {
        return this._e5_;
    }

    public void setE5(PE5 node)
    {
        if(this._e5_ != null)
        {
            this._e5_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e5_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._non_)
            + toString(this._e5_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._non_ == child)
        {
            this._non_ = null;
            return;
        }

        if(this._e5_ == child)
        {
            this._e5_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._non_ == oldChild)
        {
            setNon((TNon) newChild);
            return;
        }

        if(this._e5_ == oldChild)
        {
            setE5((PE5) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
