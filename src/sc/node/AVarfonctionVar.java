/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AVarfonctionVar extends PVar
{
    private TIdentif _identif_;
    private TCrochetgauche _crochetgauche_;
    private PExp _exp_;
    private TCrochetdroit _crochetdroit_;

    public AVarfonctionVar()
    {
        // Constructor
    }

    public AVarfonctionVar(
        @SuppressWarnings("hiding") TIdentif _identif_,
        @SuppressWarnings("hiding") TCrochetgauche _crochetgauche_,
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") TCrochetdroit _crochetdroit_)
    {
        // Constructor
        setIdentif(_identif_);

        setCrochetgauche(_crochetgauche_);

        setExp(_exp_);

        setCrochetdroit(_crochetdroit_);

    }

    @Override
    public Object clone()
    {
        return new AVarfonctionVar(
            cloneNode(this._identif_),
            cloneNode(this._crochetgauche_),
            cloneNode(this._exp_),
            cloneNode(this._crochetdroit_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVarfonctionVar(this);
    }

    public TIdentif getIdentif()
    {
        return this._identif_;
    }

    public void setIdentif(TIdentif node)
    {
        if(this._identif_ != null)
        {
            this._identif_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identif_ = node;
    }

    public TCrochetgauche getCrochetgauche()
    {
        return this._crochetgauche_;
    }

    public void setCrochetgauche(TCrochetgauche node)
    {
        if(this._crochetgauche_ != null)
        {
            this._crochetgauche_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._crochetgauche_ = node;
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public TCrochetdroit getCrochetdroit()
    {
        return this._crochetdroit_;
    }

    public void setCrochetdroit(TCrochetdroit node)
    {
        if(this._crochetdroit_ != null)
        {
            this._crochetdroit_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._crochetdroit_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identif_)
            + toString(this._crochetgauche_)
            + toString(this._exp_)
            + toString(this._crochetdroit_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identif_ == child)
        {
            this._identif_ = null;
            return;
        }

        if(this._crochetgauche_ == child)
        {
            this._crochetgauche_ = null;
            return;
        }

        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._crochetdroit_ == child)
        {
            this._crochetdroit_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identif_ == oldChild)
        {
            setIdentif((TIdentif) newChild);
            return;
        }

        if(this._crochetgauche_ == oldChild)
        {
            setCrochetgauche((TCrochetgauche) newChild);
            return;
        }

        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._crochetdroit_ == oldChild)
        {
            setCrochetdroit((TCrochetdroit) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
