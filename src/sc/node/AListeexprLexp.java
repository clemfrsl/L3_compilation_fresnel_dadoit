/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AListeexprLexp extends PLexp
{
    private PExp _exp_;
    private PLexpbis _lexpbis_;

    public AListeexprLexp()
    {
        // Constructor
    }

    public AListeexprLexp(
        @SuppressWarnings("hiding") PExp _exp_,
        @SuppressWarnings("hiding") PLexpbis _lexpbis_)
    {
        // Constructor
        setExp(_exp_);

        setLexpbis(_lexpbis_);

    }

    @Override
    public Object clone()
    {
        return new AListeexprLexp(
            cloneNode(this._exp_),
            cloneNode(this._lexpbis_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAListeexprLexp(this);
    }

    public PExp getExp()
    {
        return this._exp_;
    }

    public void setExp(PExp node)
    {
        if(this._exp_ != null)
        {
            this._exp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exp_ = node;
    }

    public PLexpbis getLexpbis()
    {
        return this._lexpbis_;
    }

    public void setLexpbis(PLexpbis node)
    {
        if(this._lexpbis_ != null)
        {
            this._lexpbis_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lexpbis_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exp_)
            + toString(this._lexpbis_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exp_ == child)
        {
            this._exp_ = null;
            return;
        }

        if(this._lexpbis_ == child)
        {
            this._lexpbis_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exp_ == oldChild)
        {
            setExp((PExp) newChild);
            return;
        }

        if(this._lexpbis_ == oldChild)
        {
            setLexpbis((PLexpbis) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
