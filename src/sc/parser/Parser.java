/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AListedeclarationvariable1Programme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce A1Programme */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AListedeclarationvariablebisLdvbis */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce ALdvbis */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce ADeclarationvariableidDv */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce ADeclarationvariableidtableauDv */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AListedeclarationfonctionLdf */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce ALdf */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce ATypeboolTv */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list);
            }
            break;
            case 9: /* reduce ATypeentierTv */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list);
            }
            break;
            case 10: /* reduce AListedeclarationvariable1$Listedeclarationvariable2$Typeoptionel1Df */
            {
                ArrayList<Object> list = new10();
                push(goTo(5), list);
            }
            break;
            case 11: /* reduce AListedeclarationvariable1$Listedeclarationvariable2$1Df */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce AListedeclarationvariable1$2$Typeoptionel1Df */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce AListedeclarationvariable1$2$1Df */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce A1$Listedeclarationvariable2$Typeoptionel1Df */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce A1$Listedeclarationvariable2$1Df */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce A1$2$Typeoptionel1Df */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list);
            }
            break;
            case 17: /* reduce A1$2$1Df */
            {
                ArrayList<Object> list = new17();
                push(goTo(5), list);
            }
            break;
            case 18: /* reduce ABi */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list);
            }
            break;
            case 19: /* reduce AListeinstructionLi */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce ALi */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list);
            }
            break;
            case 21: /* reduce AAssignationInst */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce ABoucletantqueInst */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list);
            }
            break;
            case 23: /* reduce ASialorsInst */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list);
            }
            break;
            case 24: /* reduce ASialorssinonInst */
            {
                ArrayList<Object> list = new24();
                push(goTo(8), list);
            }
            break;
            case 25: /* reduce ARetourInst */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list);
            }
            break;
            case 26: /* reduce AFonctionecrireInst */
            {
                ArrayList<Object> list = new26();
                push(goTo(8), list);
            }
            break;
            case 27: /* reduce AAppelfonctionInst */
            {
                ArrayList<Object> list = new27();
                push(goTo(8), list);
            }
            break;
            case 28: /* reduce AListeexprLexp */
            {
                ArrayList<Object> list = new28();
                push(goTo(9), list);
            }
            break;
            case 29: /* reduce ALexp */
            {
                ArrayList<Object> list = new29();
                push(goTo(9), list);
            }
            break;
            case 30: /* reduce AListeexprbisLexpbis */
            {
                ArrayList<Object> list = new30();
                push(goTo(10), list);
            }
            break;
            case 31: /* reduce ALexpbis */
            {
                ArrayList<Object> list = new31();
                push(goTo(10), list);
            }
            break;
            case 32: /* reduce AOuExp */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list);
            }
            break;
            case 33: /* reduce APasouExp */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list);
            }
            break;
            case 34: /* reduce AEtE1 */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list);
            }
            break;
            case 35: /* reduce APasetE1 */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list);
            }
            break;
            case 36: /* reduce AEgalE2 */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce AInfE2 */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list);
            }
            break;
            case 38: /* reduce APasegalinfE2 */
            {
                ArrayList<Object> list = new38();
                push(goTo(13), list);
            }
            break;
            case 39: /* reduce APlusE3 */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list);
            }
            break;
            case 40: /* reduce AMoinsE3 */
            {
                ArrayList<Object> list = new40();
                push(goTo(14), list);
            }
            break;
            case 41: /* reduce APasplusmoinsE3 */
            {
                ArrayList<Object> list = new41();
                push(goTo(14), list);
            }
            break;
            case 42: /* reduce AMulE4 */
            {
                ArrayList<Object> list = new42();
                push(goTo(15), list);
            }
            break;
            case 43: /* reduce ADivE4 */
            {
                ArrayList<Object> list = new43();
                push(goTo(15), list);
            }
            break;
            case 44: /* reduce APasmuldivE4 */
            {
                ArrayList<Object> list = new44();
                push(goTo(15), list);
            }
            break;
            case 45: /* reduce ANegationE5 */
            {
                ArrayList<Object> list = new45();
                push(goTo(16), list);
            }
            break;
            case 46: /* reduce APasnegationE5 */
            {
                ArrayList<Object> list = new46();
                push(goTo(16), list);
            }
            break;
            case 47: /* reduce AEboucleexprE6 */
            {
                ArrayList<Object> list = new47();
                push(goTo(17), list);
            }
            break;
            case 48: /* reduce AEvarE6 */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list);
            }
            break;
            case 49: /* reduce AEnombreE6 */
            {
                ArrayList<Object> list = new49();
                push(goTo(17), list);
            }
            break;
            case 50: /* reduce AEfonctionE6 */
            {
                ArrayList<Object> list = new50();
                push(goTo(17), list);
            }
            break;
            case 51: /* reduce AElireE6 */
            {
                ArrayList<Object> list = new51();
                push(goTo(17), list);
            }
            break;
            case 52: /* reduce AEvraiE6 */
            {
                ArrayList<Object> list = new52();
                push(goTo(17), list);
            }
            break;
            case 53: /* reduce AEfauxE6 */
            {
                ArrayList<Object> list = new53();
                push(goTo(17), list);
            }
            break;
            case 54: /* reduce AVaridentifVar */
            {
                ArrayList<Object> list = new54();
                push(goTo(18), list);
            }
            break;
            case 55: /* reduce AVarfonctionVar */
            {
                ArrayList<Object> list = new55();
                push(goTo(18), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AListedeclarationvariable1Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PLdv pldvNode2;
        PLdf pldfNode5;
        {
            // Block
        PDv pdvNode3;
        PLdvbis pldvbisNode4;
        pdvNode3 = (PDv)nodeArrayList1.get(0);
        pldvbisNode4 = (PLdvbis)nodeArrayList2.get(0);

        pldvNode2 = new AListedeclarationvariableLdv(pdvNode3, pldvbisNode4);
        }
        pldfNode5 = (PLdf)nodeArrayList3.get(0);

        pprogrammeNode1 = new AProgramme(pldvNode2, pldfNode5);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce A1Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PLdv pldvNode2;
        PLdf pldfNode3;
        {
            // Block

        pldvNode2 = new ALdv();
        }
        pldfNode3 = (PLdf)nodeArrayList1.get(0);

        pprogrammeNode1 = new AProgramme(pldvNode2, pldfNode3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AListedeclarationvariablebisLdvbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdvbis pldvbisNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PDv pdvNode3;
        PLdvbis pldvbisNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pdvNode3 = (PDv)nodeArrayList2.get(0);
        pldvbisNode4 = (PLdvbis)nodeArrayList3.get(0);

        pldvbisNode1 = new AListedeclarationvariablebisLdvbis(tvirguleNode2, pdvNode3, pldvbisNode4);
        }
	nodeList.add(pldvbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ALdvbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdvbis pldvbisNode1;
        {
            // Block

        pldvbisNode1 = new ALdvbis();
        }
	nodeList.add(pldvbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ADeclarationvariableidDv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDv pdvNode1;
        {
            // Block
        PTv ptvNode2;
        TIdentif tidentifNode3;
        ptvNode2 = (PTv)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);

        pdvNode1 = new ADeclarationvariableidDv(ptvNode2, tidentifNode3);
        }
	nodeList.add(pdvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce ADeclarationvariableidtableauDv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDv pdvNode1;
        {
            // Block
        PTv ptvNode2;
        TIdentif tidentifNode3;
        TCrochetgauche tcrochetgaucheNode4;
        TNombre tnombreNode5;
        TCrochetdroit tcrochetdroitNode6;
        ptvNode2 = (PTv)nodeArrayList1.get(0);
        tidentifNode3 = (TIdentif)nodeArrayList2.get(0);
        tcrochetgaucheNode4 = (TCrochetgauche)nodeArrayList3.get(0);
        tnombreNode5 = (TNombre)nodeArrayList4.get(0);
        tcrochetdroitNode6 = (TCrochetdroit)nodeArrayList5.get(0);

        pdvNode1 = new ADeclarationvariableidtableauDv(ptvNode2, tidentifNode3, tcrochetgaucheNode4, tnombreNode5, tcrochetdroitNode6);
        }
	nodeList.add(pdvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AListedeclarationfonctionLdf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLdf pldfNode1;
        {
            // Block
        PDf pdfNode2;
        PLdf pldfNode3;
        pdfNode2 = (PDf)nodeArrayList1.get(0);
        pldfNode3 = (PLdf)nodeArrayList2.get(0);

        pldfNode1 = new AListedeclarationfonctionLdf(pdfNode2, pldfNode3);
        }
	nodeList.add(pldfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ALdf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLdf pldfNode1;
        {
            // Block

        pldfNode1 = new ALdf();
        }
	nodeList.add(pldfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ATypeboolTv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTv ptvNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptvNode1 = new ATypeboolTv(tbooleanNode2);
        }
	nodeList.add(ptvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ATypeentierTv */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTv ptvNode1;
        {
            // Block
        TEntier tentierNode2;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);

        ptvNode1 = new ATypeentierTv(tentierNode2);
        }
	nodeList.add(ptvNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AListedeclarationvariable1$Listedeclarationvariable2$Typeoptionel1Df */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDf pdfNode1;
        {
            // Block
        PTo ptoNode2;
        TIdentif tidentifNode4;
        TParenthesegauche tparenthesegaucheNode5;
        PLdv pldvNode6;
        TParenthesedroite tparenthesedroiteNode9;
        PLdv pldvNode10;
        PBi pbiNode13;
        {
            // Block
        PTv ptvNode3;
        ptvNode3 = (PTv)nodeArrayList1.get(0);

        ptoNode2 = new ATypeoptionelTo(ptvNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tparenthesegaucheNode5 = (TParenthesegauche)nodeArrayList3.get(0);
        {
            // Block
        PDv pdvNode7;
        PLdvbis pldvbisNode8;
        pdvNode7 = (PDv)nodeArrayList4.get(0);
        pldvbisNode8 = (PLdvbis)nodeArrayList5.get(0);

        pldvNode6 = new AListedeclarationvariableLdv(pdvNode7, pldvbisNode8);
        }
        tparenthesedroiteNode9 = (TParenthesedroite)nodeArrayList6.get(0);
        {
            // Block
        PDv pdvNode11;
        PLdvbis pldvbisNode12;
        pdvNode11 = (PDv)nodeArrayList7.get(0);
        pldvbisNode12 = (PLdvbis)nodeArrayList8.get(0);

        pldvNode10 = new AListedeclarationvariableLdv(pdvNode11, pldvbisNode12);
        }
        pbiNode13 = (PBi)nodeArrayList9.get(0);

        pdfNode1 = new ADf(ptoNode2, tidentifNode4, tparenthesegaucheNode5, pldvNode6, tparenthesedroiteNode9, pldvNode10, pbiNode13);
        }
	nodeList.add(pdfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AListedeclarationvariable1$Listedeclarationvariable2$1Df */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDf pdfNode1;
        {
            // Block
        PTo ptoNode2;
        TIdentif tidentifNode3;
        TParenthesegauche tparenthesegaucheNode4;
        PLdv pldvNode5;
        TParenthesedroite tparenthesedroiteNode8;
        PLdv pldvNode9;
        PBi pbiNode12;
        {
            // Block

        ptoNode2 = new ATo();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode4 = (TParenthesegauche)nodeArrayList2.get(0);
        {
            // Block
        PDv pdvNode6;
        PLdvbis pldvbisNode7;
        pdvNode6 = (PDv)nodeArrayList3.get(0);
        pldvbisNode7 = (PLdvbis)nodeArrayList4.get(0);

        pldvNode5 = new AListedeclarationvariableLdv(pdvNode6, pldvbisNode7);
        }
        tparenthesedroiteNode8 = (TParenthesedroite)nodeArrayList5.get(0);
        {
            // Block
        PDv pdvNode10;
        PLdvbis pldvbisNode11;
        pdvNode10 = (PDv)nodeArrayList6.get(0);
        pldvbisNode11 = (PLdvbis)nodeArrayList7.get(0);

        pldvNode9 = new AListedeclarationvariableLdv(pdvNode10, pldvbisNode11);
        }
        pbiNode12 = (PBi)nodeArrayList8.get(0);

        pdfNode1 = new ADf(ptoNode2, tidentifNode3, tparenthesegaucheNode4, pldvNode5, tparenthesedroiteNode8, pldvNode9, pbiNode12);
        }
	nodeList.add(pdfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AListedeclarationvariable1$2$Typeoptionel1Df */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDf pdfNode1;
        {
            // Block
        PTo ptoNode2;
        TIdentif tidentifNode4;
        TParenthesegauche tparenthesegaucheNode5;
        PLdv pldvNode6;
        TParenthesedroite tparenthesedroiteNode9;
        PLdv pldvNode10;
        PBi pbiNode11;
        {
            // Block
        PTv ptvNode3;
        ptvNode3 = (PTv)nodeArrayList1.get(0);

        ptoNode2 = new ATypeoptionelTo(ptvNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tparenthesegaucheNode5 = (TParenthesegauche)nodeArrayList3.get(0);
        {
            // Block
        PDv pdvNode7;
        PLdvbis pldvbisNode8;
        pdvNode7 = (PDv)nodeArrayList4.get(0);
        pldvbisNode8 = (PLdvbis)nodeArrayList5.get(0);

        pldvNode6 = new AListedeclarationvariableLdv(pdvNode7, pldvbisNode8);
        }
        tparenthesedroiteNode9 = (TParenthesedroite)nodeArrayList6.get(0);
        {
            // Block

        pldvNode10 = new ALdv();
        }
        pbiNode11 = (PBi)nodeArrayList7.get(0);

        pdfNode1 = new ADf(ptoNode2, tidentifNode4, tparenthesegaucheNode5, pldvNode6, tparenthesedroiteNode9, pldvNode10, pbiNode11);
        }
	nodeList.add(pdfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AListedeclarationvariable1$2$1Df */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDf pdfNode1;
        {
            // Block
        PTo ptoNode2;
        TIdentif tidentifNode3;
        TParenthesegauche tparenthesegaucheNode4;
        PLdv pldvNode5;
        TParenthesedroite tparenthesedroiteNode8;
        PLdv pldvNode9;
        PBi pbiNode10;
        {
            // Block

        ptoNode2 = new ATo();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode4 = (TParenthesegauche)nodeArrayList2.get(0);
        {
            // Block
        PDv pdvNode6;
        PLdvbis pldvbisNode7;
        pdvNode6 = (PDv)nodeArrayList3.get(0);
        pldvbisNode7 = (PLdvbis)nodeArrayList4.get(0);

        pldvNode5 = new AListedeclarationvariableLdv(pdvNode6, pldvbisNode7);
        }
        tparenthesedroiteNode8 = (TParenthesedroite)nodeArrayList5.get(0);
        {
            // Block

        pldvNode9 = new ALdv();
        }
        pbiNode10 = (PBi)nodeArrayList6.get(0);

        pdfNode1 = new ADf(ptoNode2, tidentifNode3, tparenthesegaucheNode4, pldvNode5, tparenthesedroiteNode8, pldvNode9, pbiNode10);
        }
	nodeList.add(pdfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce A1$Listedeclarationvariable2$Typeoptionel1Df */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDf pdfNode1;
        {
            // Block
        PTo ptoNode2;
        TIdentif tidentifNode4;
        TParenthesegauche tparenthesegaucheNode5;
        PLdv pldvNode6;
        TParenthesedroite tparenthesedroiteNode7;
        PLdv pldvNode8;
        PBi pbiNode11;
        {
            // Block
        PTv ptvNode3;
        ptvNode3 = (PTv)nodeArrayList1.get(0);

        ptoNode2 = new ATypeoptionelTo(ptvNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tparenthesegaucheNode5 = (TParenthesegauche)nodeArrayList3.get(0);
        {
            // Block

        pldvNode6 = new ALdv();
        }
        tparenthesedroiteNode7 = (TParenthesedroite)nodeArrayList4.get(0);
        {
            // Block
        PDv pdvNode9;
        PLdvbis pldvbisNode10;
        pdvNode9 = (PDv)nodeArrayList5.get(0);
        pldvbisNode10 = (PLdvbis)nodeArrayList6.get(0);

        pldvNode8 = new AListedeclarationvariableLdv(pdvNode9, pldvbisNode10);
        }
        pbiNode11 = (PBi)nodeArrayList7.get(0);

        pdfNode1 = new ADf(ptoNode2, tidentifNode4, tparenthesegaucheNode5, pldvNode6, tparenthesedroiteNode7, pldvNode8, pbiNode11);
        }
	nodeList.add(pdfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce A1$Listedeclarationvariable2$1Df */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDf pdfNode1;
        {
            // Block
        PTo ptoNode2;
        TIdentif tidentifNode3;
        TParenthesegauche tparenthesegaucheNode4;
        PLdv pldvNode5;
        TParenthesedroite tparenthesedroiteNode6;
        PLdv pldvNode7;
        PBi pbiNode10;
        {
            // Block

        ptoNode2 = new ATo();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode4 = (TParenthesegauche)nodeArrayList2.get(0);
        {
            // Block

        pldvNode5 = new ALdv();
        }
        tparenthesedroiteNode6 = (TParenthesedroite)nodeArrayList3.get(0);
        {
            // Block
        PDv pdvNode8;
        PLdvbis pldvbisNode9;
        pdvNode8 = (PDv)nodeArrayList4.get(0);
        pldvbisNode9 = (PLdvbis)nodeArrayList5.get(0);

        pldvNode7 = new AListedeclarationvariableLdv(pdvNode8, pldvbisNode9);
        }
        pbiNode10 = (PBi)nodeArrayList6.get(0);

        pdfNode1 = new ADf(ptoNode2, tidentifNode3, tparenthesegaucheNode4, pldvNode5, tparenthesedroiteNode6, pldvNode7, pbiNode10);
        }
	nodeList.add(pdfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce A1$2$Typeoptionel1Df */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDf pdfNode1;
        {
            // Block
        PTo ptoNode2;
        TIdentif tidentifNode4;
        TParenthesegauche tparenthesegaucheNode5;
        PLdv pldvNode6;
        TParenthesedroite tparenthesedroiteNode7;
        PLdv pldvNode8;
        PBi pbiNode9;
        {
            // Block
        PTv ptvNode3;
        ptvNode3 = (PTv)nodeArrayList1.get(0);

        ptoNode2 = new ATypeoptionelTo(ptvNode3);
        }
        tidentifNode4 = (TIdentif)nodeArrayList2.get(0);
        tparenthesegaucheNode5 = (TParenthesegauche)nodeArrayList3.get(0);
        {
            // Block

        pldvNode6 = new ALdv();
        }
        tparenthesedroiteNode7 = (TParenthesedroite)nodeArrayList4.get(0);
        {
            // Block

        pldvNode8 = new ALdv();
        }
        pbiNode9 = (PBi)nodeArrayList5.get(0);

        pdfNode1 = new ADf(ptoNode2, tidentifNode4, tparenthesegaucheNode5, pldvNode6, tparenthesedroiteNode7, pldvNode8, pbiNode9);
        }
	nodeList.add(pdfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce A1$2$1Df */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDf pdfNode1;
        {
            // Block
        PTo ptoNode2;
        TIdentif tidentifNode3;
        TParenthesegauche tparenthesegaucheNode4;
        PLdv pldvNode5;
        TParenthesedroite tparenthesedroiteNode6;
        PLdv pldvNode7;
        PBi pbiNode8;
        {
            // Block

        ptoNode2 = new ATo();
        }
        tidentifNode3 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode4 = (TParenthesegauche)nodeArrayList2.get(0);
        {
            // Block

        pldvNode5 = new ALdv();
        }
        tparenthesedroiteNode6 = (TParenthesedroite)nodeArrayList3.get(0);
        {
            // Block

        pldvNode7 = new ALdv();
        }
        pbiNode8 = (PBi)nodeArrayList4.get(0);

        pdfNode1 = new ADf(ptoNode2, tidentifNode3, tparenthesegaucheNode4, pldvNode5, tparenthesedroiteNode6, pldvNode7, pbiNode8);
        }
	nodeList.add(pdfNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ABi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBi pbiNode1;
        {
            // Block
        TAccoladegauche taccoladegaucheNode2;
        PLi pliNode3;
        TAccoladedroite taccoladedroiteNode4;
        taccoladegaucheNode2 = (TAccoladegauche)nodeArrayList1.get(0);
        pliNode3 = (PLi)nodeArrayList2.get(0);
        taccoladedroiteNode4 = (TAccoladedroite)nodeArrayList3.get(0);

        pbiNode1 = new ABi(taccoladegaucheNode2, pliNode3, taccoladedroiteNode4);
        }
	nodeList.add(pbiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AListeinstructionLi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLi pliNode1;
        {
            // Block
        PInst pinstNode2;
        PLi pliNode3;
        pinstNode2 = (PInst)nodeArrayList1.get(0);
        pliNode3 = (PLi)nodeArrayList2.get(0);

        pliNode1 = new AListeinstructionLi(pinstNode2, pliNode3);
        }
	nodeList.add(pliNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ALi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLi pliNode1;
        {
            // Block

        pliNode1 = new ALi();
        }
	nodeList.add(pliNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAssignationInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        PVar pvarNode2;
        TEgal tegalNode3;
        PExp pexpNode4;
        TPointvirgule tpointvirguleNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpointvirguleNode5 = (TPointvirgule)nodeArrayList4.get(0);

        pinstNode1 = new AAssignationInst(pvarNode2, tegalNode3, pexpNode4, tpointvirguleNode5);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ABoucletantqueInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TTantque ttantqueNode2;
        PExp pexpNode3;
        TFaire tfaireNode4;
        PBi pbiNode5;
        ttantqueNode2 = (TTantque)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        pbiNode5 = (PBi)nodeArrayList4.get(0);

        pinstNode1 = new ABoucletantqueInst(ttantqueNode2, pexpNode3, tfaireNode4, pbiNode5);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ASialorsInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TSi tsiNode2;
        PExp pexpNode3;
        TAlors talorsNode4;
        PBi pbiNode5;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pbiNode5 = (PBi)nodeArrayList4.get(0);

        pinstNode1 = new ASialorsInst(tsiNode2, pexpNode3, talorsNode4, pbiNode5);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ASialorssinonInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TSi tsiNode2;
        PExp pexpNode3;
        TAlors talorsNode4;
        PBi pbiNode5;
        TSinon tsinonNode6;
        PBi pbiNode7;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pbiNode5 = (PBi)nodeArrayList4.get(0);
        tsinonNode6 = (TSinon)nodeArrayList5.get(0);
        pbiNode7 = (PBi)nodeArrayList6.get(0);

        pinstNode1 = new ASialorssinonInst(tsiNode2, pexpNode3, talorsNode4, pbiNode5, tsinonNode6, pbiNode7);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ARetourInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TRetour tretourNode2;
        PExp pexpNode3;
        TPointvirgule tpointvirguleNode4;
        tretourNode2 = (TRetour)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tpointvirguleNode4 = (TPointvirgule)nodeArrayList3.get(0);

        pinstNode1 = new ARetourInst(tretourNode2, pexpNode3, tpointvirguleNode4);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AFonctionecrireInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TEcrire tecrireNode2;
        TParenthesegauche tparenthesegaucheNode3;
        PExp pexpNode4;
        TParenthesedroite tparenthesedroiteNode5;
        TPointvirgule tpointvirguleNode6;
        tecrireNode2 = (TEcrire)nodeArrayList1.get(0);
        tparenthesegaucheNode3 = (TParenthesegauche)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tparenthesedroiteNode5 = (TParenthesedroite)nodeArrayList4.get(0);
        tpointvirguleNode6 = (TPointvirgule)nodeArrayList5.get(0);

        pinstNode1 = new AFonctionecrireInst(tecrireNode2, tparenthesegaucheNode3, pexpNode4, tparenthesedroiteNode5, tpointvirguleNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAppelfonctionInst */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInst pinstNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TParenthesegauche tparenthesegaucheNode3;
        PLexp plexpNode4;
        TParenthesedroite tparenthesedroiteNode5;
        TPointvirgule tpointvirguleNode6;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode3 = (TParenthesegauche)nodeArrayList2.get(0);
        plexpNode4 = (PLexp)nodeArrayList3.get(0);
        tparenthesedroiteNode5 = (TParenthesedroite)nodeArrayList4.get(0);
        tpointvirguleNode6 = (TPointvirgule)nodeArrayList5.get(0);

        pinstNode1 = new AAppelfonctionInst(tidentifNode2, tparenthesegaucheNode3, plexpNode4, tparenthesedroiteNode5, tpointvirguleNode6);
        }
	nodeList.add(pinstNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AListeexprLexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLexp plexpNode1;
        {
            // Block
        PExp pexpNode2;
        PLexpbis plexpbisNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        plexpbisNode3 = (PLexpbis)nodeArrayList2.get(0);

        plexpNode1 = new AListeexprLexp(pexpNode2, plexpbisNode3);
        }
	nodeList.add(plexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ALexp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLexp plexpNode1;
        {
            // Block

        plexpNode1 = new ALexp();
        }
	nodeList.add(plexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AListeexprbisLexpbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLexpbis plexpbisNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PExp pexpNode3;
        PLexpbis plexpbisNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        plexpbisNode4 = (PLexpbis)nodeArrayList3.get(0);

        plexpbisNode1 = new AListeexprbisLexpbis(tvirguleNode2, pexpNode3, plexpbisNode4);
        }
	nodeList.add(plexpbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ALexpbis */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PLexpbis plexpbisNode1;
        {
            // Block

        plexpbisNode1 = new ALexpbis();
        }
	nodeList.add(plexpbisNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AOuExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExp pexpNode2;
        TOu touNode3;
        PE1 pe1Node4;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pe1Node4 = (PE1)nodeArrayList3.get(0);

        pexpNode1 = new AOuExp(pexpNode2, touNode3, pe1Node4);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce APasouExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PE1 pe1Node2;
        pe1Node2 = (PE1)nodeArrayList1.get(0);

        pexpNode1 = new APasouExp(pe1Node2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AEtE1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE1 pe1Node1;
        {
            // Block
        PE1 pe1Node2;
        TEt tetNode3;
        PE2 pe2Node4;
        pe1Node2 = (PE1)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        pe2Node4 = (PE2)nodeArrayList3.get(0);

        pe1Node1 = new AEtE1(pe1Node2, tetNode3, pe2Node4);
        }
	nodeList.add(pe1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce APasetE1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE1 pe1Node1;
        {
            // Block
        PE2 pe2Node2;
        pe2Node2 = (PE2)nodeArrayList1.get(0);

        pe1Node1 = new APasetE1(pe2Node2);
        }
	nodeList.add(pe1Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AEgalE2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE2 pe2Node1;
        {
            // Block
        PE2 pe2Node2;
        TEgal tegalNode3;
        PE3 pe3Node4;
        pe2Node2 = (PE2)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pe3Node4 = (PE3)nodeArrayList3.get(0);

        pe2Node1 = new AEgalE2(pe2Node2, tegalNode3, pe3Node4);
        }
	nodeList.add(pe2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AInfE2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE2 pe2Node1;
        {
            // Block
        PE2 pe2Node2;
        TInf tinfNode3;
        PE3 pe3Node4;
        pe2Node2 = (PE2)nodeArrayList1.get(0);
        tinfNode3 = (TInf)nodeArrayList2.get(0);
        pe3Node4 = (PE3)nodeArrayList3.get(0);

        pe2Node1 = new AInfE2(pe2Node2, tinfNode3, pe3Node4);
        }
	nodeList.add(pe2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce APasegalinfE2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE2 pe2Node1;
        {
            // Block
        PE3 pe3Node2;
        pe3Node2 = (PE3)nodeArrayList1.get(0);

        pe2Node1 = new APasegalinfE2(pe3Node2);
        }
	nodeList.add(pe2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce APlusE3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE3 pe3Node1;
        {
            // Block
        PE3 pe3Node2;
        TPlus tplusNode3;
        PE4 pe4Node4;
        pe3Node2 = (PE3)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pe4Node4 = (PE4)nodeArrayList3.get(0);

        pe3Node1 = new APlusE3(pe3Node2, tplusNode3, pe4Node4);
        }
	nodeList.add(pe3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AMoinsE3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE3 pe3Node1;
        {
            // Block
        PE3 pe3Node2;
        TMoins tmoinsNode3;
        PE4 pe4Node4;
        pe3Node2 = (PE3)nodeArrayList1.get(0);
        tmoinsNode3 = (TMoins)nodeArrayList2.get(0);
        pe4Node4 = (PE4)nodeArrayList3.get(0);

        pe3Node1 = new AMoinsE3(pe3Node2, tmoinsNode3, pe4Node4);
        }
	nodeList.add(pe3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce APasplusmoinsE3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE3 pe3Node1;
        {
            // Block
        PE4 pe4Node2;
        pe4Node2 = (PE4)nodeArrayList1.get(0);

        pe3Node1 = new APasplusmoinsE3(pe4Node2);
        }
	nodeList.add(pe3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AMulE4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE4 pe4Node1;
        {
            // Block
        PE4 pe4Node2;
        TMul tmulNode3;
        PE5 pe5Node4;
        pe4Node2 = (PE4)nodeArrayList1.get(0);
        tmulNode3 = (TMul)nodeArrayList2.get(0);
        pe5Node4 = (PE5)nodeArrayList3.get(0);

        pe4Node1 = new AMulE4(pe4Node2, tmulNode3, pe5Node4);
        }
	nodeList.add(pe4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ADivE4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE4 pe4Node1;
        {
            // Block
        PE4 pe4Node2;
        TDiv tdivNode3;
        PE5 pe5Node4;
        pe4Node2 = (PE4)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pe5Node4 = (PE5)nodeArrayList3.get(0);

        pe4Node1 = new ADivE4(pe4Node2, tdivNode3, pe5Node4);
        }
	nodeList.add(pe4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce APasmuldivE4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE4 pe4Node1;
        {
            // Block
        PE5 pe5Node2;
        pe5Node2 = (PE5)nodeArrayList1.get(0);

        pe4Node1 = new APasmuldivE4(pe5Node2);
        }
	nodeList.add(pe4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ANegationE5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE5 pe5Node1;
        {
            // Block
        TNon tnonNode2;
        PE5 pe5Node3;
        tnonNode2 = (TNon)nodeArrayList1.get(0);
        pe5Node3 = (PE5)nodeArrayList2.get(0);

        pe5Node1 = new ANegationE5(tnonNode2, pe5Node3);
        }
	nodeList.add(pe5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce APasnegationE5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE5 pe5Node1;
        {
            // Block
        PE6 pe6Node2;
        pe6Node2 = (PE6)nodeArrayList1.get(0);

        pe5Node1 = new APasnegationE5(pe6Node2);
        }
	nodeList.add(pe5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AEboucleexprE6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE6 pe6Node1;
        {
            // Block
        TParenthesegauche tparenthesegaucheNode2;
        PExp pexpNode3;
        TParenthesedroite tparenthesedroiteNode4;
        tparenthesegaucheNode2 = (TParenthesegauche)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tparenthesedroiteNode4 = (TParenthesedroite)nodeArrayList3.get(0);

        pe6Node1 = new AEboucleexprE6(tparenthesegaucheNode2, pexpNode3, tparenthesedroiteNode4);
        }
	nodeList.add(pe6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AEvarE6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE6 pe6Node1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pe6Node1 = new AEvarE6(pvarNode2);
        }
	nodeList.add(pe6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AEnombreE6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE6 pe6Node1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        pe6Node1 = new AEnombreE6(tnombreNode2);
        }
	nodeList.add(pe6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AEfonctionE6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE6 pe6Node1;
        {
            // Block
        TIdentif tidentifNode2;
        TParenthesegauche tparenthesegaucheNode3;
        PLexp plexpNode4;
        TParenthesedroite tparenthesedroiteNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tparenthesegaucheNode3 = (TParenthesegauche)nodeArrayList2.get(0);
        plexpNode4 = (PLexp)nodeArrayList3.get(0);
        tparenthesedroiteNode5 = (TParenthesedroite)nodeArrayList4.get(0);

        pe6Node1 = new AEfonctionE6(tidentifNode2, tparenthesegaucheNode3, plexpNode4, tparenthesedroiteNode5);
        }
	nodeList.add(pe6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AElireE6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE6 pe6Node1;
        {
            // Block
        TLire tlireNode2;
        TParenthesegauche tparenthesegaucheNode3;
        TParenthesedroite tparenthesedroiteNode4;
        tlireNode2 = (TLire)nodeArrayList1.get(0);
        tparenthesegaucheNode3 = (TParenthesegauche)nodeArrayList2.get(0);
        tparenthesedroiteNode4 = (TParenthesedroite)nodeArrayList3.get(0);

        pe6Node1 = new AElireE6(tlireNode2, tparenthesegaucheNode3, tparenthesedroiteNode4);
        }
	nodeList.add(pe6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AEvraiE6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE6 pe6Node1;
        {
            // Block
        TVrai tvraiNode2;
        tvraiNode2 = (TVrai)nodeArrayList1.get(0);

        pe6Node1 = new AEvraiE6(tvraiNode2);
        }
	nodeList.add(pe6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AEfauxE6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PE6 pe6Node1;
        {
            // Block
        TFaux tfauxNode2;
        tfauxNode2 = (TFaux)nodeArrayList1.get(0);

        pe6Node1 = new AEfauxE6(tfauxNode2);
        }
	nodeList.add(pe6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AVaridentifVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentif tidentifNode2;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);

        pvarNode1 = new AVaridentifVar(tidentifNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AVarfonctionVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TIdentif tidentifNode2;
        TCrochetgauche tcrochetgaucheNode3;
        PExp pexpNode4;
        TCrochetdroit tcrochetdroitNode5;
        tidentifNode2 = (TIdentif)nodeArrayList1.get(0);
        tcrochetgaucheNode3 = (TCrochetgauche)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tcrochetdroitNode5 = (TCrochetdroit)nodeArrayList4.get(0);

        pvarNode1 = new AVarfonctionVar(tidentifNode2, tcrochetgaucheNode3, pexpNode4, tcrochetdroitNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 7}, {2, SHIFT, 1}, {3, SHIFT, 2}, {30, SHIFT, 3}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 3}, {5, SHIFT, 9}, },
			{{-1, ERROR, 4}, {31, ACCEPT, -1}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 7}, {30, SHIFT, 12}, },
			{{-1, REDUCE, 7}, {2, SHIFT, 1}, {3, SHIFT, 2}, {30, SHIFT, 3}, },
			{{-1, ERROR, 9}, {2, SHIFT, 1}, {3, SHIFT, 2}, {6, SHIFT, 15}, },
			{{-1, ERROR, 10}, {2, SHIFT, 1}, {3, SHIFT, 2}, },
			{{-1, REDUCE, 7}, {2, SHIFT, 1}, {3, SHIFT, 2}, {30, SHIFT, 3}, },
			{{-1, REDUCE, 4}, {5, SHIFT, 20}, {7, SHIFT, 21}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 14}, {30, SHIFT, 22}, },
			{{-1, ERROR, 15}, {2, SHIFT, 1}, {3, SHIFT, 2}, {9, SHIFT, 23}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, ERROR, 17}, {30, SHIFT, 27}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 20}, {2, SHIFT, 1}, {3, SHIFT, 2}, {6, SHIFT, 29}, },
			{{-1, ERROR, 21}, {4, SHIFT, 31}, },
			{{-1, ERROR, 22}, {5, SHIFT, 20}, },
			{{-1, REDUCE, 20}, {21, SHIFT, 32}, {22, SHIFT, 33}, {25, SHIFT, 34}, {27, SHIFT, 35}, {30, SHIFT, 36}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 26}, {6, SHIFT, 41}, },
			{{-1, REDUCE, 4}, {7, SHIFT, 21}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 29}, {2, SHIFT, 1}, {3, SHIFT, 2}, {9, SHIFT, 23}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, ERROR, 31}, {8, SHIFT, 45}, },
			{{-1, ERROR, 32}, {5, SHIFT, 46}, },
			{{-1, ERROR, 33}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, ERROR, 34}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, ERROR, 35}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, REDUCE, 54}, {5, SHIFT, 64}, {7, SHIFT, 65}, },
			{{-1, ERROR, 37}, {10, SHIFT, 66}, },
			{{-1, REDUCE, 20}, {21, SHIFT, 32}, {22, SHIFT, 33}, {25, SHIFT, 34}, {27, SHIFT, 35}, {30, SHIFT, 36}, },
			{{-1, ERROR, 39}, {11, SHIFT, 68}, },
			{{-1, ERROR, 40}, {9, SHIFT, 23}, },
			{{-1, ERROR, 41}, {2, SHIFT, 1}, {3, SHIFT, 2}, {9, SHIFT, 23}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 44}, {6, SHIFT, 73}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 46}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 48}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, ERROR, 49}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, ERROR, 50}, {5, SHIFT, 77}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 54}, {5, SHIFT, 78}, {7, SHIFT, 65}, },
			{{-1, ERROR, 54}, {1, SHIFT, 79}, {17, SHIFT, 80}, },
			{{-1, REDUCE, 33}, {18, SHIFT, 81}, },
			{{-1, REDUCE, 35}, {11, SHIFT, 82}, {16, SHIFT, 83}, },
			{{-1, REDUCE, 38}, {12, SHIFT, 84}, {13, SHIFT, 85}, },
			{{-1, REDUCE, 41}, {14, SHIFT, 86}, {15, SHIFT, 87}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 62}, {17, SHIFT, 80}, {26, SHIFT, 88}, },
			{{-1, ERROR, 63}, {17, SHIFT, 80}, {28, SHIFT, 89}, },
			{{-1, REDUCE, 29}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, ERROR, 65}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 68}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 72}, {9, SHIFT, 23}, },
			{{-1, ERROR, 73}, {2, SHIFT, 1}, {3, SHIFT, 2}, {9, SHIFT, 23}, },
			{{-1, ERROR, 74}, {6, SHIFT, 98}, {17, SHIFT, 80}, },
			{{-1, ERROR, 75}, {6, SHIFT, 99}, {17, SHIFT, 80}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 77}, {6, SHIFT, 100}, },
			{{-1, REDUCE, 29}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 80}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, ERROR, 81}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, ERROR, 82}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, ERROR, 83}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, ERROR, 84}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, ERROR, 85}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, ERROR, 86}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, ERROR, 87}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, ERROR, 88}, {9, SHIFT, 23}, },
			{{-1, ERROR, 89}, {9, SHIFT, 23}, },
			{{-1, ERROR, 90}, {6, SHIFT, 112}, },
			{{-1, REDUCE, 31}, {0, SHIFT, 113}, {17, SHIFT, 80}, },
			{{-1, ERROR, 92}, {8, SHIFT, 115}, {17, SHIFT, 80}, },
			{{-1, ERROR, 93}, {1, SHIFT, 116}, {17, SHIFT, 80}, },
			{{-1, ERROR, 94}, {9, SHIFT, 23}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 3}, {0, SHIFT, 10}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 98}, {1, SHIFT, 119}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 101}, {6, SHIFT, 120}, },
			{{-1, REDUCE, 32}, {18, SHIFT, 81}, },
			{{-1, REDUCE, 34}, {11, SHIFT, 82}, {16, SHIFT, 83}, },
			{{-1, REDUCE, 36}, {12, SHIFT, 84}, {13, SHIFT, 85}, },
			{{-1, REDUCE, 37}, {12, SHIFT, 84}, {13, SHIFT, 85}, },
			{{-1, REDUCE, 39}, {14, SHIFT, 86}, {15, SHIFT, 87}, },
			{{-1, REDUCE, 40}, {14, SHIFT, 86}, {15, SHIFT, 87}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 23}, {29, SHIFT, 121}, },
			{{-1, ERROR, 112}, {1, SHIFT, 122}, },
			{{-1, ERROR, 113}, {4, SHIFT, 47}, {5, SHIFT, 48}, {19, SHIFT, 49}, {20, SHIFT, 50}, {23, SHIFT, 51}, {24, SHIFT, 52}, {30, SHIFT, 53}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 118}, {9, SHIFT, 23}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 121}, {9, SHIFT, 23}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 31}, {0, SHIFT, 113}, {17, SHIFT, 80}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 30}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 11}, {16, 26}, {18, 28}, {24, 40}, {30, 44}, {42, 72}, {70, 94}, {96, 118}, },
			{{-1, 5}, {9, 16}, {10, 18}, {15, 24}, {20, 30}, {29, 42}, {41, 70}, {73, 96}, },
			{{-1, 6}, {8, 13}, {11, 19}, },
			{{-1, 17}, {0, 7}, {8, 14}, {11, 14}, },
			{{-1, 8}, },
			{{-1, 25}, {29, 43}, {40, 69}, {41, 71}, {72, 95}, {73, 97}, {88, 110}, {89, 111}, {94, 117}, {118, 124}, {121, 125}, },
			{{-1, 37}, {38, 67}, },
			{{-1, 38}, },
			{{-1, 90}, {78, 101}, },
			{{-1, 114}, {123, 126}, },
			{{-1, 91}, {33, 54}, {34, 62}, {35, 63}, {46, 74}, {48, 75}, {65, 92}, {68, 93}, {113, 123}, },
			{{-1, 55}, {80, 102}, },
			{{-1, 56}, {81, 103}, },
			{{-1, 57}, {82, 104}, {83, 105}, },
			{{-1, 58}, {84, 106}, {85, 107}, },
			{{-1, 59}, {49, 76}, {86, 108}, {87, 109}, },
			{{-1, 60}, },
			{{-1, 61}, {23, 39}, {38, 39}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'bool', 'entier', identif, EOF",
			"expecting: identif",
			"expecting: '('",
			"expecting: EOF",
			"expecting: ',', 'bool', 'entier', identif, EOF",
			"expecting: 'bool', 'entier', ')'",
			"expecting: 'bool', 'entier'",
			"expecting: ',', 'bool', 'entier', '(', '[', identif, EOF",
			"expecting: 'bool', 'entier', '{'",
			"expecting: ',', ')'",
			"expecting: ',', 'bool', 'entier', ')', '{', identif, EOF",
			"expecting: nombre",
			"expecting: '}', 'ecrire', 'retour', 'tantque', 'si', identif",
			"expecting: ',', '{'",
			"expecting: ')'",
			"expecting: ',', 'bool', 'entier', ')', '[', '{', identif, EOF",
			"expecting: 'bool', 'entier', ')', '{', identif, EOF",
			"expecting: ']'",
			"expecting: nombre, '(', '!', 'lire', 'vrai', 'faux', identif",
			"expecting: '(', '[', '='",
			"expecting: '}'",
			"expecting: '='",
			"expecting: '{'",
			"expecting: ',', ';', ')', ']', '=', '+', '-', '*', '/', '<', '|', '&', 'faire', 'alors'",
			"expecting: ',', ';', '(', ')', '[', ']', '=', '+', '-', '*', '/', '<', '|', '&', 'faire', 'alors'",
			"expecting: ';', '|'",
			"expecting: ',', ';', ')', ']', '|', '&', 'faire', 'alors'",
			"expecting: ',', ';', ')', ']', '=', '<', '|', '&', 'faire', 'alors'",
			"expecting: ',', ';', ')', ']', '=', '+', '-', '<', '|', '&', 'faire', 'alors'",
			"expecting: '|', 'faire'",
			"expecting: '|', 'alors'",
			"expecting: nombre, '(', ')', '!', 'lire', 'vrai', 'faux', identif",
			"expecting: 'bool', 'entier', '}', 'ecrire', 'retour', 'tantque', 'si', 'sinon', identif, EOF",
			"expecting: ')', '|'",
			"expecting: ',', ')', '|'",
			"expecting: ']', '|'",
			"expecting: ';'",
			"expecting: '}', 'ecrire', 'retour', 'tantque', 'si', 'sinon', identif",
        };*/
    private static int[] errors;
/*      {
			0, 1, 1, 2, 3, 4, 3, 1, 0, 5, 6, 0, 7, 3, 1, 8, 9, 1, 10, 3, 5, 11, 2, 12, 13, 0, 14, 15, 16, 8, 9, 17, 2, 18, 18, 18, 19, 20, 12, 21, 22, 8, 13, 0, 14, 10, 18, 23, 18, 18, 2, 23, 23, 24, 25, 26, 27, 28, 23, 23, 23, 23, 29, 30, 31, 18, 32, 20, 18, 0, 13, 0, 22, 8, 33, 33, 23, 14, 31, 12, 18, 18, 18, 18, 18, 18, 18, 18, 22, 22, 14, 34, 35, 25, 22, 0, 13, 0, 36, 23, 23, 14, 26, 27, 28, 28, 23, 23, 23, 23, 12, 37, 36, 18, 14, 23, 12, 0, 22, 12, 23, 22, 12, 34, 0, 12, 14, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
